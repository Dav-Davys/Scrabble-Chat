{
  "name": "was_framework",
  "version": "0.9.5",
  "description": "Micro framework used in the WAS course @UVersailles",
  "main": "lib/framework",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "prepublish": "/bin/sh scripts/SqlString.sh"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/defeo/was_framework.git"
  },
  "keywords": [
    "framework",
    "express",
    "database",
    "sqlite",
    "sqlite3",
    "mysql"
  ],
  "author": {
    "name": "Luca De Feo",
    "email": "luca.de-feo@uvsq.fr",
    "url": "http://www.prism.uvsq.fr/~dfl"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "dependencies": {
    "async": "0.x",
    "express": "3.x",
    "consolidate": ">=0.8.0",
    "hogan.js": "2.x",
    "mysql": "2.0.0-alpha7",
    "node-sqlite-purejs": "*",
    "socket.io": "1.0 || 0.9.x"
  },
  "readme": "# was_framework\n\n\nExpress-based framework used in the WAS course @UVersailles\n\nCourse page at http://swift.prism.uvsq.fr/\n\nInstall\n\n    npm install was_framework\n\nExample\n\n```javascript\nvar fmwk = require('was_framework');\n\nvar opts = {\n  default_handler: handler\n};\n\n// Create and configure application\nvar app = fmwk(opts);\n\nfunction handler(req, res) {\n  res.send(200, 'Hello world');\n}\n\n// Start application on port 12345\napp.start(12345);\n```\n\n## Recognized options\n\n* `static_dir` directory containing static content (must be an absolute path). Default: `/path/to/script/static/`.\n* `static_mount` URL where static content is served. Default: `/static`.\n* `template_dir` directory containing templates (must be an absolute path). Default: `/path/to/script/templates/`.\n* `default_handler` handler to be executed when no other handler is found. Default: `was_framework.not_found_handler`.\n* `default_route` redirect all requests for '/' to this URL. Default `null`.\n* `secret` secret used for cookies. Default: `WAS`.\n* `port` port to listen to. Default `8080`.\n* `db` object containing database configuration. See [below](#databases). Default `null`.\n\nExample showing use of all options:\n\n```javascript\nvar fmwk = require('was_framework');\n\nvar opts = {\n  static_dir         : __dirname + 'client',\n  static_mount       : '/public',\n  template_dir       : __dirname + 'views',\n  default_handler    : handler,\n  default_route      : '/index',\n  secret             : 'my_secret',\n  port               : 80\n  db                 : {\n                          type: 'sqlite',\n                          file: 'data.db'\n  }\n};\n\nvar app = fmwk(opts);\n\napp.f_routes.index = function(req, res) {\n  res.send('This is the default page');\n}\n\napp.f_routes.view = function(req, res) {\n  // my_client.js is in ./public\n  res.render('a_view.mu', { \n                            title: 'This is a template',\n                            script: '<script src=\"/public/my_client.js\"></script>'\n                          });\n}\n\nfunction handler(req, res) {\n  res.send(404, 'Not found');\n}\n\napp.start();\n```\n\nAll the options are added to the application's settings, so that you may get the using the `.get`:\n\n```javascript\nvar dir = app.get('static_dir');\n```\n\n## Starting the server\n\nThe `.start` method is used to start the application. It takes three arguments:\n\n```javascript\nfunction start(port, db, callback)\n```\n\n* `port` is the port number to listen on.\n* `db` is an object as described in the [Databases section](#databases). If both this object and the `db` option is used, this one gets the precedence.\n* `callback` is a callback to be called after the server has started. It receives an optional `error` argument if the server fails to start.\n\n```javascript\nvar fmwk = require('was_framework');\n\nvar opts = {\n  db: {\n    type: 'sqlite',\n    file: 'app.db'\n  }\n}\n\nvar app = fmwk();\n\napp.start(80, opts.db, function(err) {\n  console.log('Server started');\n});\n```\n\n## Routing\n\n`was_framwork` comes with a *function name based router*, mapping\nURLs to functions with the least effort. Handlers are\nadded to the object `app.f_routes`.\n\n```javascript\nvar fmwk = require('was_framework');\n\nvar opts = {\n  // redirect all requests for / to /home\n  default_route: '/home';\n}\n\nvar app = fmwk(opts);\n\napp.f_routes.home = function(req, res) {\n  // this function handles requests for /home\n};\n\napp.f_routes.fee = function(req, res) {\n  // this function handles requests for /fee\n};\n\n// You can even nest functions inside objects\napp.f_routes.foo = {\n  bar: function(req, res) {\n    // this function handles requests for /foo/bar\n  },\n\n  baz: function(req, res) {\n    // this function handles requests for /foo/baz\n  }\n};\n\napp.start();\n```\n\nBesides the function name based router, `was_framework` supports also\nthe default router of [express](http://expressjs.com) for finer control over\nURLs and HTTP methods. Read the [documentation](http://expressjs.com/api.html#app.VERB) of\n[express](http://expressjs.com) for more information.\n\n\n## Sending content\n\n`was_framework` supports the usual `.write` and `.end` methods. More high-level functions to send content \nto the user are available via [express](http://expressjs.com/api.html) functions.\n\nThe `.send` method sends arbitrary content and sets the appropriate HTTP headers. To set the content type,\nuse the `.type` method.\n\n```javascript\napp.f_routes.a_route = function(req, res) {\n  res.type('html');\n  res.send('<h1>Hello world!</h1>');\n}\n```\n\nThe `.json` method compiles JavaScript objects to JSON and sends them with the appropraite HTTP headers.\nContent type is automatically set\n\n```javascript\napp.f_routes.xhr = function(req, res) {\n  var data = {\n    name     : 'foo',\n    surname  : 'bar',\n    adress   : 'some avenue'\n  };\n  res.json(data);\n}\n```\n\nThe `.download` method sends a file for download. The mime type is automaticalli guessed\n\n```javascript\napp.f_routes.download = function(req, res) {\n  res.download('/path/to/file.png').\n}\n```\n\n\n## Hogan.js templates\n\n`was_framework` comes with built-in support for [Mustache](http://mustache.github.com/mustache.5.html)\ntemplates using `hogan.js`.\nUnless configured otherwise (see [options](#recognized-options)), Mustache templates must be contained in a directory called\n`templates`, and must have filename\nending in `.mu` or `.mustache`. Templates are compiled and sent\nto the client at once using the `.render`.\n\n```javascript\napp.f_routes.home = function(req, res) {\n  // Compile Mustache template and send to the user\n  res.render('about.mu', { title: 'My cool web app' });\n}\n```\n\nA feature unique to `was_framework` is the method `.multiRender`,\nallowing to compile and send multiple templates. It makes a simpler alternative to partials. Hereâ€™s an example using\nthree templates, the compiled HTML is concatenated and sent to the\nuser.\n\n```javascript\napp.f_routes.home = function(req, res) {\n  res.multiRender(['head.mu', 'body.mu', 'foot.mu'], { title: 'My cool web app' });\n}\n```\n\n\n## Static file server\n\n`was_framework` comes with built-in support for static files. \nCreate a directory named `static` inside your working directory: any file\ncontained in it will be available at the URL `/static/filename`. These paths can be configured, see [options](#recognized-options).\n\n\n## Redirections and other HTTP codes\n\nURL redirections are performed by the `.redirect` method.\n\n```javascript\napp.f_routes.rel_redirect = function(req, res) {\n  res.redirect('a/relative/url/');\n};\n\napp.f_routes.abs_redirect = function(req, res) {\n  res.redirect('/an/absoulte/url/');\n}\n\napp.f_routes.full_redirect = function(req, res) {\n  res.redirect('http://some.other.site/some/page');\n}\n```\n\nOther HTTP codes can be sent to the client, along with an arbitrary\nmessage, using the `.send` method.\n\n```javascript\napp.f_routes.error = function(req, res) {\n  res.send(500, '<h1>An unexpected error occured.</h1>');\n}\n```\n\n## Cookies\n\nReceived cookies are parsed into the `req.cookies` object\n\n```javascript\napp.f_routes.read_cookies = function(req, res) {\n  console.log(req.cookies.sessid);\n}\n```\n\nTo set cookies, use the `res.setCookie` method, to clear the, use `res.clearCookie`\n\n```javascript\napp.f_routes.set_cookie = function(req, res) {\n  res.setCookie('sessid', '1');\n}\n\napp.f_routes.clear_cookie = function(req, res) {\n  res.clearCookie('sessid');\n}\n```\n\n\n## Databases\n\n`was_framework` has builtin support for MySql and SQLite, based on the modules [mysql](https://npmjs.org/package/mysql)\nand [node-sqlite-purejs](https://npmjs.org/package/node-sqlite-purejs). The\nconnection to the database is opened automatically before the server is\nstarted. Use an SQLite database like this (if `filename.db` does not\nexist, it is created automatically):\n\n```javascript\nvar fmwk = require('was_framework');\n\nvar opts = {\n  db: {\n    type: 'sqlite',\n    file: 'filename.db'\n  }\n}\n\nvar app = fmwk(opts);\n\napp.start();   // by default, listen on port 8080\n```\n\nUse a MySql database like this:\n\n```javascript\nvar fmwk = require('was_framework');\n\nvar opts = {\n  db: {\n    type: 'mysql',\n    host: 'localhost',\n    user: 'root',\n    password: 'admin',\n    database: 'db'\n  }\n}\n\nvar app = fmwk(opts);\n\napp.start();   // by default, listen on port 8080\n```\n\nAre also recognized all the options accepted by the modules\n[mysql](https://npmjs.org/package/mysql)\nand [node-sqlite-purejs](https://npmjs.org/package/node-sqlite-purejs).\n\nAfter a successfull connection, an `app.db` object is created.\nIndependently of the driver, `was_framework` tries to provide an API as\nconsistent as possible with that of the [mysql](https://npmjs.org/package/mysql) module. To\nsend an SQL query to the database, use the `.query` method of `app.db`, with the following signature\n\n```\nquery(sql[, values[, callback]])\n```\n\nWhere `sql` is a string containing an SQL statement, values is an optional array of values to be replaced inside `sql`,\nand `callback` is a function with signature `callback(err, results)` to be called upon completion or error.\n\nThe `.query` method supports automatic SQL esacping to help prevent SQL injections. A `?` or `??` is replaced \nby the corresponding value in `values`. `?` is for escaping SQL values, while `??` is for escaping SQL identifierss.\nIn this example\n\n```javascript\napp.db.query('SELECT ?? FROM table WHERE name=? AND town=?', ['adress', 'WAS', 'Versailles']);\n```\n\nproduces the SQL statement\n\n```sql\nSELECT `adress` FROM table WHERE name='WAS' AND town='Versailles'\n```\n\nAlways prefer automatic escaping. If you really want to do the\nescaping manually, you can use the methods `app.db.escape` for\nvalues `app.db.escapeId` for identifiers. An alternative is to use\n`app.db.format(sql, values)`, which returns a string with substitutions performed as in the `.query` method.\n\nHere is a longer example.\n\n```javascript\napp.f_routes.create_table = function(req, res) {\n  req.app.db.query('CREATE TABLE test (a TEXT, b TEXT)', function(err) {\n    if (err) console.log(err);\n  });\n};\n\napp.f_routes.select = function(req, res) {\n  // Prepared statement (use ?)\n  req.app.db.query('SELECT * FROM test WHERE a=? AND b=?', \n                   [req.query.a, req.query.b],\n                   function(err, results) {\n                     if (err) {\n                       console.log(err);\n                     } else {\n                       for (var i = 0; i < results.length; i++)\n                         console.log(results[i]);\n                     }\n  });\n}\n```\n\n## Socket.io\n\n`was_framwork` has builtion support for [socket.io](http://socket.io/). To use it, simply pass the \noption `socket_io`, and the socket object will be available at `app.io`.\n\n```javascript\nvar fmwk = require('was_framework');\n\nvar app = fmwk({\n    socket_io: true\n})\n\napp.f_routes.politesse = function(req, res) {\n    res.write('<script src=\"/socket.io/socket.io.js\"></script>');\n    res.write('<script>');\n    res.write('  var socket = io.connect(\"http://localhost\");');\n    res.write('  socket.on(\"merci\", function (data) {');\n    res.write('    console.log(data);');\n    res.write('    socket.emit(\"de rien\", { my: \"Il n\\'y a pas de quoi!\" });');\n    res.write('  });');\n    res.write('</script>');\n    res.end();\n}\n\napp.io.sockets.on('connection', function(socket) {\n    socket.emit('merci', {greet: 'Merci beaucoup'});\n    socket.on('de rien', function(data) {\n        console.log(data);\n    });\n});\n\napp.start(12345)\n```\n\nAlternatively, the `http` server for the application is available at `app.http_server`. You can use it to create \nthe socket like this.\n\n```javascript\nvar fmwk = require('was_framework');\nvar app = fmwk();\nvar io = require('socket.io').liste(app.http_server);\n```\n",
  "_id": "was_framework@0.9.5",
  "dist": {
    "shasum": "b354073d4a91542d369c42ada1038fc4548a098a"
  },
  "_from": "was_framework@",
  "_resolved": "https://registry.npmjs.org/was_framework/-/was_framework-0.9.5.tgz"
}
